{"version":3,"file":"static/js/290.09c09061.chunk.js","mappings":"sTAoBMA,EAAQC,EAAAA,GAAAA,GAAH,8BAgDX,IAtBqBC,EAsBfC,GAtBeD,EApBrB,YAAoE,IAAD,IAArCE,MAAAA,OAAqC,MAA7B,GAA6B,MAAzBC,UAAAA,OAAyB,MAAb,WAAS,EAAI,EAI/D,OACI,iCACI,SAACL,EAAD,UACKI,EAAME,KAAI,SAAAC,GAAI,OACX,wBAAmBA,EAAKC,MAAfD,EAAKE,GADH,OAInB,SAAC,IAAD,CAAQC,KAAK,OAAOC,QAASN,EAAU,CAAEI,GAAIG,KAAKC,MAAOL,KAAM,aAA/D,yBAGX,EAUU,YAAoD,IAAxBM,EAAuB,EAAvBA,UAAcC,GAAS,YACtD,GAA8BC,EAAAA,EAAAA,UAASF,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAOA,OALAC,EAAAA,EAAAA,YAAU,WACNC,QAAQC,IAAI,YAAaP,GACzBI,EAAWJ,EACd,GAAE,CAACA,IAEAG,GACO,yCAGJ,SAACf,GAAD,UAAsBa,GAChC,GA+FL,IAAMO,GAAarB,EAAAA,EAAAA,KAxFnB,YAAkC,EAAbsB,UAAc,IAS/B,GAAkCP,EAAAA,EAAAA,WAAS,GAA3C,eAAOF,EAAP,KAAkBU,EAAlB,KAEA,GAA0BR,EAAAA,EAAAA,UAAS,CAAC,CAChCP,GAAI,EACJD,KAAM,eAFV,eAAOJ,EAAP,KAAcqB,EAAd,KAoBA,OACI,4BACI,SAAC,IAAD,CAAQf,KAAK,OAAOC,QAVH,WAErBa,GAAa,GACbE,YAAW,WACPF,GAAa,EAChB,GAAE,IACN,EAIO,yBACA,SAACrB,EAAD,CAAqBW,UAAWA,EAAWV,MAAOA,EAAOC,UAlBzC,SAACsB,GAAD,OAAS,WAI7BP,QAAQC,IAAI,YAAaM,GACzBF,EAAS,GAAD,eAAKrB,GAAL,CAAYuB,IACvB,CANuB,MAsE3B,GAEkB1B,CAAH,4QAOI2B,EAAAA,EAAAA,IAAW,iBAAkB,YASlC,SAASC,IACpB,OAAQ,SAACP,EAAD,CAAYQ,MAAOC,EAAAA,IAC9B,C","sources":["pages/ChartTest.jsx"],"sourcesContent":["\nimport { useSearchParams, useNavigate } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\nimport ApiSender, { ApiError } from \"apiSender\"; // 載入 /src/apiSender/index.js\nimport styled from 'styled-components';\n\nimport BlankBlock from 'element/Home/BlankBlock'\n\nimport { board as boardThemeObject } from 'theme/reas'\nimport { layout as layoutThemeObject } from 'theme/reas'\nimport { fetchTheme } from 'util/ThemeMixin'\nimport Button from \"component/Button\";\n// import ProfileControl from \"river/Profile\";\n\n\n// 5 React Design Patterns You Should Know\n// https://javascript.plainenglish.io/5-react-design-patterns-you-should-know-629030e2e2c7\n// 正在測試這5種React的Design Pattern\n\n\nconst UList = styled.ul`\n    \n`\n\n// 1. Container and Presentational Components\n\nfunction TodoPresentational({ todos = [], onAddTodo = () => { } }) {\n\n    // <>: 類似於<template>的語法，虛擬化組件root的那個DOM\n    // onAddTodo: 直接執行該函式，即可設定完畢該Button要輸入的參數，變得簡潔\n    return (\n        <>\n            <UList>\n                {todos.map(todo => (\n                    <li key={todo.id}>{todo.text}</li>\n                ))}\n            </UList>\n            <Button type=\"fill\" onClick={onAddTodo({ id: Date.now(), text: 'New Todo' })}> Add Todo</Button>\n        </>\n    );\n}\n\n\n// ---------------------------------------------------\n\n// 這種寫法可以用來管理多個組件當中共用的邏輯，並且將該邏輯單純化\nfunction withLoading(WrappedComponent) {\n    // return function LoadingComponent({ isLoading, ...props }) {\n    //     return <WrappedComponent {...props} />;\n    // }\n    return function LoadingComponent({ isLoading, ...props }) {\n        const [loading, setLoading] = useState(isLoading);\n\n        useEffect(() => {\n            console.log('isLoading', isLoading)\n            setLoading(isLoading);\n        }, [isLoading]);\n\n        if (loading) {\n            return <div>Loading...</div>;\n        }\n\n        return <WrappedComponent {...props} />;\n    };\n}\n\n\n// 透過withLoading()把TodoList組件多包一層，掛載通用的邏輯上去\nconst TodoListWithLoading = withLoading(TodoPresentational);\n\nfunction ChartTest({ className }) {\n\n    // 3. Render Props\n\n    // 未完成\n\n    \n    // 2. Higher-Order Components (HOCs) \n\n    const [isLoading, setIsLoading] = useState(false);\n\n    const [todos, setTodos] = useState([{\n        id: 1,\n        text: 'AAAAAAAAA'\n    }]);\n\n    const onAddTodo = () => (obj) => () => {\n        // 第一層: 生成實體\n        // 第二層: 在Button當中掛載參數\n        // 第三層: click時呼叫的函式\n        console.log('onAddTodo', obj)\n        setTodos([...todos, obj])\n    }\n    const onClickLoadTodos = () => {\n        // () => setIsLoading(true)\n        setIsLoading(true);\n        setTimeout(function () {\n            setIsLoading(false)\n        }, 2000);\n    }\n\n    return (\n        <div>\n            <Button type=\"fill\" onClick={onClickLoadTodos}>Load Todos</Button>\n            <TodoListWithLoading isLoading={isLoading} todos={todos} onAddTodo={onAddTodo()} />\n        </div>\n    );\n\n    /* TodoPresentational********************************************\n    // 1. Container and Presentational Components\n\n    const [todos, setTodos] = useState([{\n        id: 1,\n        text: 'AAAAAAAAA'\n    }]);\n\n    const onAddTodo = () => (obj) => () => {\n        // 第一層: 生成實體\n        // 第二層: 在Button當中掛載參數\n        // 第三層: click時呼叫的函式\n        console.log('onAddTodo', obj)\n        setTodos([...todos, obj])\n    }\n\n    return (\n        <div>\n            <TodoPresentational todos={todos} onAddTodo={onAddTodo()}></TodoPresentational>\n        </div>\n    )\n    ************************************************************** */\n\n    // // 測試API用，之後刪\n    // const testApiHandle = () => () => {\n    //     // new ProfileControl().autoLoadUserProfile();\n\n    //     // return ApiSender.sendApi('[get]/permissions').then((apiRes) => {\n    //     //     console.log('aaa apiRes', apiRes.rows);\n    //     // });\n    // }\n\n    // return (\n    //     <div className={className}>\n    //         <div className=\"block-column\">\n    //             <BlankBlock></BlankBlock>\n    //             <div>\n    //                 <Button type=\"fill\" onClick={testApiHandle()}>BBBBBB</Button>\n    //             </div>\n    //             {/* <BlankBlock></BlankBlock> */}\n    //         </div>\n    //         <div className=\"block-column\">\n    //             <BlankBlock></BlankBlock>\n    //             {/* <BlankBlock></BlankBlock>\n    //             <BlankBlock></BlankBlock> */}\n    //         </div>\n    //     </div>\n    // );\n}\n\nconst HomeStyled = styled(ChartTest)`\ndisplay: flex;\nflex-direction: row;\nwidth: 100%;\nflex-wrap: wrap;\n\njustify-content: flex-start;\nbackground-color: ${fetchTheme('pageBackground', '#eaeaea')};\n\n    .block-column {\n        display: flex;\n        flex-direction: column;\n        /* min-width: 50%; */\n    }\n`\n\nexport default function HomeExport() {\n    return (<HomeStyled theme={layoutThemeObject}></HomeStyled>);\n};"],"names":["UList","styled","WrappedComponent","TodoListWithLoading","todos","onAddTodo","map","todo","text","id","type","onClick","Date","now","isLoading","props","useState","loading","setLoading","useEffect","console","log","HomeStyled","className","setIsLoading","setTodos","setTimeout","obj","fetchTheme","HomeExport","theme","layoutThemeObject"],"sourceRoot":""}